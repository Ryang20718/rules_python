load("@pip//:requirements.bzl", "entry_point")
load("@rules_python//python:defs.bzl", "py_test", "py_precompiler_toolchain")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")

# This rule adds a convenient way to update the requirements file.
compile_pip_requirements(
    name = "requirements",
    src = "requirements.in",
    requirements_windows = ":requirements_windows.txt",
)

pip_sphinx = entry_point(
    pkg = "sphinx",
    script = "sphinx-build",
)

pip_yamllint = entry_point("yamllint")

py_test(
    name = "pip_parse_entry_points_test",
    srcs = ["pip_repository_entry_points_test.py"],
    data = [
        pip_sphinx,
        pip_yamllint,
    ],
    env = {
        "SPHINX_BUILD_ENTRY_POINT": "$(rootpath {})".format(pip_sphinx),
        "YAMLLINT_ENTRY_POINT": "$(rootpath {})".format(pip_yamllint),
    },
    main = "pip_repository_entry_points_test.py",
    deps = ["@rules_python//python/runfiles"],
)

toolchain(
    name = "precompiler_3_10_python_linux_x86_64_toolchain",
    target_compatible_with = [
        # "@rules_python//python/config_settings:is_python_3.10", # doesn't have mandatory ConstraintValueInfo TODO(ryang) remove after debugging
        "@platforms//os:linux",
    ],
    exec_compatible_with = ["@platforms//os:linux"],
    toolchain = ":precompiler_toolchain_py_310",
    toolchain_type = "@rules_python//python:precompiler_toolchain_type",
    visibility = ["//visibility:public"],
)

py_precompiler_toolchain(
    name = "precompiler_toolchain_py_310",
    interpreter = ":bin/python3.10",
    python_version="310",
)
